;; -*- emacs-lisp -*-

;;============================================================================|
;;                               CUSTOM PACKAGES                              |
;;============================================================================|

;; -- Maxframe -- Detect screen resolution and maximize on startup
(require 'maxframe)
;; (maximize-frame)	; window nicely maximized but breaks toggle-fullscreen
(add-hook 'window-setup-hook 'maximize-frame t)

;; -- Flymake -- Compilation and error/warning reports on the fly
(require 'flymake)
(add-hook 'c-mode-common-hook 'flymake-mode)
(require 'flymake-tools)
(require 'flymake-php)
(add-hook 'php-mode-user-hook 'flymake-php-load)
(eval-after-load `flymake
  `(progn
     (set-face-underline 'flymake-errline "OrangeRed")
     (set-face-background 'flymake-errline nil)
     (set-face-underline 'flymake-warnline "yellow")
     (set-face-background 'flymake-warnline nil)

     (setq flymake-gui-warnings-enabled nil)   ;; Disable popup windows

     (add-hook 'flymake-mode-hook
	       (lambda () (define-key (current-local-map) [f6] 'flymake-goto-next-error)))

     ;; Flymake C / C++
     (setq flymake-allowed-file-name-masks
	   (cons '(".+\\.cc?$"
		   flymake-simple-make-init
		   flymake-simple-cleanup
		   flymake-get-real-file-name)
		 flymake-allowed-file-name-masks))
     ))

;;; -- flyspell-prog -- aspell in comments
(add-hook 'c-mode-hook          'flyspell-prog-mode 1)
(add-hook 'c++-mode-hook        'flyspell-prog-mode 1)
(add-hook 'cperl-mode-hook      'flyspell-prog-mode 1)
(add-hook 'perl-mode-hook       'flyspell-prog-mode 1)
(add-hook 'python-mode-hook     'flyspell-prog-mode 1)
(add-hook 'ruby-mode-hook       'flyspell-prog-mode 1)
(add-hook 'sh-mode-hook         'flyspell-prog-mode 1)
(add-hook 'makefile-mode-hook   'flyspell-prog-mode 1)
(add-hook 'emacs-lisp-mode-hook 'flyspell-prog-mode 1)
(defun my-flyspell-accept-filenames (start end useless)
  (file-exists-p
   (let ((chars "--:$+<>@-Z_a-z~") (pt (point)))
     (buffer-substring
      (save-excursion
	(skip-chars-backward chars)
	(skip-chars-forward "<" pt)
	(point))
      (save-excursion
	(skip-chars-forward chars)
	(skip-chars-backward ">;.,!?" pt)
	(point))))
   )
  )
(add-hook 'flyspell-incorrect-hook 'my-flyspell-accept-filenames)
(defun my-flyspell-accept-urls (start end useless)
  (string-match
   "^[a-zA-Z]+://"
   (let ((chars "!-~") (pt (point)))
     (buffer-substring
      (save-excursion
	(skip-chars-backward chars)
	(point))
      (save-excursion
	(skip-chars-forward chars)
	(point))))
   )
  )
(add-hook 'flyspell-incorrect-hook 'my-flyspell-accept-urls)



;;; -- Highlight-tail -- Kewl effect when writing fast :D
(require 'highlight-tail)
(setq highlight-tail-colors '(("blue" . 0)
                              ("grey15" . 50)))
(setq highlight-tail-steps 50
      highlight-tail-timer 0.03)
(highlight-tail-reload)


;=============================================================================|
;                             C-MODE MODIFICATIONS                            |
;=============================================================================|

;; Autoload TAGS files generated by etags
(add-hook 'c-mode-common-hook
	  (lambda ()
	    (if (file-exists-p "TAGS") (visit-tags-table "TAGS"))
	    (if (file-exists-p "../TAGS") (visit-tags-table "../TAGS"))
	    (if (file-exists-p "../../TAGS") (visit-tags-table "../../TAGS"))
	    ))


;;============================================================================|
;;                               MISC FUNCTIONS                               |
;;============================================================================|

(defun toggle-fullscreen ()
  "Toggle between complete fullscreen and windowed"
  (interactive)
  (set-frame-parameter nil 'fullscreen
		       (if (frame-parameter nil 'fullscreen) nil 'fullboth)))

;;============================================================================|
;;                                    MISC                                    |
;;============================================================================|

;; Control + up/down: moves lines
(global-set-key [C-up]   'move-line-up)
(global-set-key [C-down] 'move-line-down)

(normal-erase-is-backspace-mode 1)
;; (pc-selection-mode)			;; Breaks \M-arrows windmove ... moved to .emacs
(mouse-avoidance-mode 'animate)		;; Move the mouse away when cursor approaches !
;(auto-image-file-mode)			;; Useless ... and might slow down loading
(set-default 'indicate-empty-lines t)	;; Indicate end of file with small //


;;; [[ keyboard binds ]]

(global-unset-key "\C-z")		;; Unset annoying Ctrl-Z

(global-set-key [f11] 'toggle-fullscreen) ;; toggle between fullscreen and windowed


;;; [[ colors & look ]]

(defconst my-cursor-color "blue")	;; Sexy cursor color

(tool-bar-mode 0)			;; Remove useless tool-bar on top
(blink-cursor-mode 0)			;; Disable cursor blinking !
(set-cursor-color my-cursor-color)	;; Set cursor color previously defined

;; DARK THEME BECAUSE WE ARE EVIL
(set-background-color "grey10")			;; Default text font
(set-foreground-color "grey95")			;; Default text font
(set-face-background 'mode-line "firebrick")	;; mode-line at bottom
(set-face-foreground 'mode-line "black")	;; mode-line at bottom
(set-face-background 'scroll-bar "grey35")	;; scroll-bar on sides
(set-face-foreground 'scroll-bar "#ffffff")	;; scroll-bar on sides
(set-face-background 'tool-bar "grey50")	;; tool-bar at top
(set-face-foreground 'tool-bar "black")		;; tool-bar at top

;; Highlight current line
(global-hl-line-mode 1)
(set-face-background 'highlight "grey15")

;; Cursor color according to mode (Normal => Pink, Readonly => grey, Insert => Red)
(setq hcz-set-cursor-color-color "")
(setq hcz-set-cursor-color-buffer "")
(defun hcz-set-cursor-color-according-to-mode ()
  "change cursor color according to some minor modes."
  ;; set-cursor-color is somewhat costly, so we only call it when needed:
  (let ((color (cond (buffer-read-only "grey")
		     (overwrite-mode "red")
		     (t my-cursor-color))))
    (unless (and
	     (string= color hcz-set-cursor-color-color)
	     (string= (buffer-name) hcz-set-cursor-color-buffer))
      (set-cursor-color (setq hcz-set-cursor-color-color color))
      (setq hcz-set-cursor-color-buffer (buffer-name)))))
(add-hook 'post-command-hook 'hcz-set-cursor-color-according-to-mode)



;; MUST be last always
(highlight-tail-reload)
